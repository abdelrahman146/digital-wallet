basePath: /api/v1
definitions:
  api.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/api.ErrorResponseBody'
      success:
        type: boolean
    type: object
  api.ErrorResponseBody:
    properties:
      code:
        type: string
      fields:
        additionalProperties:
          type: string
        type: object
      httpCode:
        type: integer
      message:
        type: string
      reason:
        type: string
    type: object
  api.SuccessResponse:
    properties:
      result: {}
      success:
        type: boolean
    type: object
  model.Account:
    properties:
      balance:
        type: integer
      createdAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userId:
        type: string
      version:
        type: integer
      walletId:
        type: string
    type: object
  model.Audit:
    properties:
      actor:
        type: string
      actorId:
        type: string
      createdAt:
        type: string
      id:
        type: string
      newRecord:
        allOf:
        - $ref: '#/definitions/types.JSONB'
        description: '@swaggertype object'
      oldRecord:
        allOf:
        - $ref: '#/definitions/types.JSONB'
        description: '@swaggertype object'
      operation:
        type: string
      recordId:
        type: string
      remarks:
        type: string
      table:
        type: string
    type: object
  model.ExchangeRate:
    properties:
      createdAt:
        type: string
      exchangeRate:
        description: '@swaggertype number'
        type: number
      fromWalletId:
        type: string
      id:
        type: integer
      minimumAmount:
        type: integer
      tierId:
        type: string
      toWalletId:
        type: string
      updatedAt:
        type: string
    type: object
  model.Transaction:
    properties:
      accountId:
        type: string
      amount:
        type: integer
      availableAmount:
        type: integer
      createdAt:
        type: string
      expireAt:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/types.JSONB'
      newBalance:
        type: integer
      previousBalance:
        type: integer
      programId:
        type: string
      reason:
        type: string
      type:
        type: string
      version:
        type: integer
      walletId:
        type: string
    type: object
  model.Trigger:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      properties:
        $ref: '#/definitions/types.JSONB'
      slug:
        type: string
      updatedAt:
        type: string
    type: object
  model.User:
    properties:
      accounts:
        items:
          $ref: '#/definitions/model.Account'
        type: array
      createdAt:
        type: string
      id:
        type: string
      isActive;default:true:
        type: boolean
      tierId:
        type: string
      updatedAt:
        type: string
    type: object
  model.Wallet:
    properties:
      createdAt:
        type: string
      currency:
        type: string
      description:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      isArchived:
        type: boolean
      isMonetary:
        type: boolean
      limitGlobal:
        type: integer
      limitPerUser:
        type: integer
      minimumWithdrawal:
        type: integer
      name:
        type: string
      pointsExpireAfter:
        allOf:
        - $ref: '#/definitions/types.Interval'
        description: '@swaggertype string'
      updatedAt:
        type: string
    type: object
  service.CreateExchangeRateRequest:
    properties:
      exchangeRate:
        type: number
      fromWalletId:
        type: string
      tierId:
        type: string
      toWalletId:
        type: string
    required:
    - exchangeRate
    - fromWalletId
    - toWalletId
    type: object
  service.CreateTriggerRequest:
    properties:
      name:
        maxLength: 100
        minLength: 1
        type: string
      properties:
        additionalProperties: true
        type: object
      slug:
        type: string
    required:
    - name
    - properties
    - slug
    type: object
  service.CreateUserRequest:
    properties:
      id:
        maxLength: 20
        minLength: 1
        type: string
      tierId:
        type: string
    required:
    - id
    type: object
  service.CreateWalletRequest:
    properties:
      currency:
        maxLength: 4
        minLength: 1
        type: string
      description:
        maxLength: 255
        type: string
      id:
        type: string
      isMonetary:
        type: boolean
      limitGlobal:
        type: integer
      limitPerUser:
        type: integer
      name:
        maxLength: 100
        minLength: 1
        type: string
      pointsExpireAfter:
        type: integer
    required:
    - currency
    - id
    - name
    type: object
  service.ExchangeResponse:
    properties:
      fromTransaction:
        $ref: '#/definitions/model.Transaction'
      toTransaction:
        $ref: '#/definitions/model.Transaction'
    type: object
  service.UpdateTriggerRequest:
    properties:
      name:
        maxLength: 100
        minLength: 1
        type: string
      properties:
        additionalProperties: true
        type: object
      slug:
        type: string
    type: object
  service.UpdateWalletRequest:
    properties:
      currency:
        type: string
      description:
        maxLength: 255
        type: string
      isMonetary:
        type: boolean
      limitGlobal:
        type: integer
      limitPerUser:
        type: integer
      name:
        maxLength: 100
        minLength: 1
        type: string
      pointsExpireAfter:
        type: integer
    required:
    - currency
    - name
    type: object
  types.Interval:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
  types.JSONB:
    additionalProperties: true
    type: object
host: http://localhost:3401
info:
  contact:
    name: Abdel Rahman Hussein
    url: https://github.com/abdelrahman146
  description: This is the Digital Wallet API documentation
  termsOfService: http://swagger.io/terms/
  title: Digital Wallet API
  version: "1.0"
paths:
  /backoffice/audit/actor/{actor}/{actorId}:
    get:
      description: Get all audit logs of an actor
      parameters:
      - description: Actor
        in: path
        name: actor
        required: true
        type: string
      - description: Actor ID
        in: path
        name: actorId
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.Audit'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all audit logs of an actor
      tags:
      - Audit
  /backoffice/audit/record/{table}/{recordId}:
    get:
      description: Get all audit logs of a record
      parameters:
      - description: Table
        in: path
        name: table
        required: true
        type: string
      - description: Record ID
        in: path
        name: recordId
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.Audit'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all audit logs of a record
      tags:
      - Audit
  /backoffice/audit/table/{table}:
    get:
      description: Get all audit logs of a table
      parameters:
      - description: Table
        in: path
        name: table
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.Audit'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all audit logs of a table
      tags:
      - Audit
  /backoffice/exchange-rates:
    get:
      description: Get all exchange rates
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.ExchangeRate'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all exchange rates
      tags:
      - Exchange Rate
    post:
      consumes:
      - application/json
      description: Create an exchange rate based on the provided request
      parameters:
      - description: Create Exchange Rate Request
        in: body
        name: exchangeRate
        required: true
        schema:
          $ref: '#/definitions/service.CreateExchangeRateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.ExchangeRate'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new exchange rate
      tags:
      - Exchange Rate
  /backoffice/exchange-rates/{exchangeRateId}:
    delete:
      description: Delete an exchange rate by its ID
      parameters:
      - description: Exchange Rate ID
        in: path
        name: exchangeRateId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete an exchange rate
      tags:
      - Exchange Rate
    put:
      consumes:
      - application/json
      description: Update an exchange rate based on the provided request
      parameters:
      - description: Exchange Rate ID
        in: path
        name: exchangeRateId
        required: true
        type: string
      - description: Update Exchange Rate Request
        in: body
        name: exchangeRate
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.ExchangeRate'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update an exchange rate
      tags:
      - Exchange Rate
  /backoffice/exchange-rates/wallets/{walletId}:
    get:
      description: Get all exchange rates of a wallet
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.ExchangeRate'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all exchange rates of a wallet
      tags:
      - Exchange Rate
  /backoffice/triggers:
    post:
      consumes:
      - application/json
      description: Create a trigger based on the provided request
      parameters:
      - description: Create Trigger Request
        in: body
        name: trigger
        required: true
        schema:
          $ref: '#/definitions/service.CreateTriggerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Trigger'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new trigger
      tags:
      - Trigger
  /backoffice/triggers/{triggerId}:
    delete:
      description: Delete a trigger based on the provided request
      parameters:
      - description: Trigger ID
        in: path
        name: triggerId
        required: true
        type: string
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a trigger
      tags:
      - Trigger
    get:
      description: Get a trigger by its ID
      parameters:
      - description: Trigger ID
        in: path
        name: triggerId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Trigger'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a trigger by its ID
      tags:
      - Trigger
    put:
      consumes:
      - application/json
      description: Update a trigger based on the provided request
      parameters:
      - description: Trigger ID
        in: path
        name: triggerId
        required: true
        type: string
      - description: Update Trigger Request
        in: body
        name: trigger
        required: true
        schema:
          $ref: '#/definitions/service.UpdateTriggerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Trigger'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update a trigger
      tags:
      - Trigger
  /backoffice/users:
    get:
      description: Get a list of users
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a list of users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a user based on the provided request
      parameters:
      - description: Create User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new user
      tags:
      - User
  /backoffice/users/{userId}:
    delete:
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a user
      tags:
      - User
    get:
      description: Get a user by its ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a user by its ID
      tags:
      - User
  /backoffice/users/{userId}/tier/{tierId}:
    put:
      description: Set the tier of a user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Tier ID
        in: path
        name: tierId
        required: true
        type: string
      responses:
        "202":
          description: Accepted
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Set the tier of a user
      tags:
      - User
  /backoffice/wallets:
    get:
      description: Get a list of wallets
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.Wallet'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a list of wallets
      tags:
      - Wallet
    post:
      consumes:
      - application/json
      description: Create a wallet based on the provided request
      parameters:
      - description: Create Wallet Request
        in: body
        name: wallet
        required: true
        schema:
          $ref: '#/definitions/service.CreateWalletRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Wallet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new wallet
      tags:
      - Wallet
  /backoffice/wallets/{walletId}:
    delete:
      description: Delete a wallet by its ID
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a wallet
      tags:
      - Wallet
    get:
      description: Get a wallet by its ID
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Wallet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a wallet by its ID
      tags:
      - Wallet
    put:
      consumes:
      - application/json
      description: Update a wallet based on the provided request
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Update Wallet Request
        in: body
        name: wallet
        required: true
        schema:
          $ref: '#/definitions/service.UpdateWalletRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Wallet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update a wallet
      tags:
      - Wallet
  /backoffice/wallets/{walletId}/accounts:
    get:
      description: Get all accounts of a wallet
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.Account'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all accounts of a wallet
      tags:
      - Account
    post:
      consumes:
      - application/json
      description: Create an account based on the provided request
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Create Account Request
        in: body
        name: account
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Account'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create an account
      tags:
      - Account
  /backoffice/wallets/{walletId}/accounts/{accountId}:
    delete:
      description: Delete an account
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Account ID
        in: path
        name: accountId
        required: true
        type: string
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete an account
      tags:
      - Account
    get:
      description: Get an account by its ID
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Account ID
        in: path
        name: accountId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Account'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get an account by its ID
      tags:
      - Account
  /backoffice/wallets/{walletId}/accounts/{accountId}/transactions:
    get:
      description: Get all transactions of an account
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Account ID
        in: path
        name: accountId
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.Transaction'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all transactions of an account
      tags:
      - Account
  /backoffice/wallets/{walletId}/accounts/{accountId}/transactions/sum:
    get:
      description: Get the sum of all transactions of an account
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Account ID
        in: path
        name: accountId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  type: number
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get the sum of all transactions of an account
      tags:
      - Account
  /backoffice/wallets/{walletId}/accounts/sum:
    get:
      description: Get the sum of all accounts of a wallet
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  type: number
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get the sum of all accounts of a wallet
      tags:
      - Account
  /backoffice/wallets/{walletId}/check-integrity:
    get:
      description: Check the integrity of a wallet by comparing the sum of accounts
        and transactions
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Check the integrity of a wallet
      tags:
      - Wallet
  /backoffice/wallets/{walletId}/transactions:
    get:
      description: Get all transactions of a wallet
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.Transaction'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all transactions of a wallet
      tags:
      - Transaction
    post:
      consumes:
      - application/json
      description: Create a transaction based on the provided request
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Create Transaction Request
        in: body
        name: req
        required: true
        schema:
          type: object
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Transaction'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a transaction
      tags:
      - Transaction
  /backoffice/wallets/{walletId}/transactions/exchange:
    post:
      consumes:
      - application/json
      description: Create an exchange transaction based on the provided request
      parameters:
      - description: Create Exchange Transaction Request
        in: body
        name: req
        required: true
        schema:
          type: object
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/service.ExchangeResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create an exchange transaction
      tags:
      - Transaction
  /backoffice/wallets/{walletId}/transactions/sum:
    get:
      description: Get the sum of all transactions of a wallet
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get the sum of all transactions of a wallet
      tags:
      - Transaction
swagger: "2.0"
