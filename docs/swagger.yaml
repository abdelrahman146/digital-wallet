basePath: /api/v1
definitions:
  api.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/api.ErrorResponseBody'
      success:
        type: boolean
    type: object
  api.ErrorResponseBody:
    properties:
      code:
        type: string
      fields:
        additionalProperties:
          type: string
        type: object
      httpCode:
        type: integer
      message:
        type: string
      reason:
        type: string
    type: object
  api.SuccessResponse:
    properties:
      result: {}
      success:
        type: boolean
    type: object
  model.Wallet:
    properties:
      createdAt:
        type: string
      currency:
        type: string
      description:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      isArchived:
        type: boolean
      isMonetary:
        type: boolean
      limitGlobal:
        type: integer
      limitPerUser:
        type: integer
      minimumWithdrawal:
        type: integer
      name:
        type: string
      pointsExpireAfter:
        allOf:
        - $ref: '#/definitions/types.Interval'
        description: '@swaggertype string'
      updatedAt:
        type: string
    type: object
  service.CreateWalletRequest:
    properties:
      currency:
        maxLength: 4
        minLength: 1
        type: string
      description:
        maxLength: 255
        type: string
      id:
        type: string
      isMonetary:
        type: boolean
      limitGlobal:
        type: integer
      limitPerUser:
        type: integer
      name:
        maxLength: 100
        minLength: 1
        type: string
      pointsExpireAfter:
        type: integer
    required:
    - currency
    - id
    - name
    type: object
  service.UpdateWalletRequest:
    properties:
      currency:
        type: string
      description:
        maxLength: 255
        type: string
      isMonetary:
        type: boolean
      limitGlobal:
        type: integer
      limitPerUser:
        type: integer
      name:
        maxLength: 100
        minLength: 1
        type: string
      pointsExpireAfter:
        type: integer
    required:
    - currency
    - name
    type: object
  types.Interval:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
host: localhost:3401
info:
  contact:
    name: Abdel Rahman Hussein
    url: https://github.com/abdelrahman146
  description: This is the Digital Wallet API documentation
  termsOfService: http://swagger.io/terms/
  title: Digital Wallet API
  version: "1.0"
paths:
  /backoffice/wallets:
    get:
      description: Get a list of wallets
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/model.Wallet'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a list of wallets
      tags:
      - Wallet
    post:
      consumes:
      - application/json
      description: Create a wallet based on the provided request
      parameters:
      - description: Create Wallet Request
        in: body
        name: wallet
        required: true
        schema:
          $ref: '#/definitions/service.CreateWalletRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Wallet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new wallet
      tags:
      - Wallet
  /backoffice/wallets/{walletId}:
    delete:
      description: Delete a wallet by its ID
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a wallet
      tags:
      - Wallet
    get:
      description: Get a wallet by its ID
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Wallet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a wallet by its ID
      tags:
      - Wallet
    put:
      consumes:
      - application/json
      description: Update a wallet based on the provided request
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      - description: Update Wallet Request
        in: body
        name: wallet
        required: true
        schema:
          $ref: '#/definitions/service.UpdateWalletRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  $ref: '#/definitions/model.Wallet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update a wallet
      tags:
      - Wallet
  /backoffice/wallets/{walletId}/check-integrity:
    get:
      description: Check the integrity of a wallet by comparing the sum of accounts
        and transactions
      parameters:
      - description: Wallet ID
        in: path
        name: walletId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessResponse'
            - properties:
                result:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Check the integrity of a wallet
      tags:
      - Wallet
swagger: "2.0"
