// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/wallet_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/wallet_service.go -destination=internal/service/mocks/wallet_service_mock.go -package=service_mock
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	service "github.com/abdelrahman146/digital-wallet/internal/service"
	api "github.com/abdelrahman146/digital-wallet/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletService) CreateWallet(ctx context.Context, req *service.CreateWalletRequest) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, req)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletServiceMockRecorder) CreateWallet(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletService)(nil).CreateWallet), ctx, req)
}

// DeleteWallet mocks base method.
func (m *MockWalletService) DeleteWallet(ctx context.Context, walletId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", ctx, walletId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockWalletServiceMockRecorder) DeleteWallet(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockWalletService)(nil).DeleteWallet), ctx, walletId)
}

// GetAccountsSum mocks base method.
func (m *MockWalletService) GetAccountsSum(ctx context.Context, walletId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsSum", ctx, walletId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsSum indicates an expected call of GetAccountsSum.
func (mr *MockWalletServiceMockRecorder) GetAccountsSum(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsSum", reflect.TypeOf((*MockWalletService)(nil).GetAccountsSum), ctx, walletId)
}

// GetTransactionsSum mocks base method.
func (m *MockWalletService) GetTransactionsSum(ctx context.Context, walletId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsSum", ctx, walletId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsSum indicates an expected call of GetTransactionsSum.
func (mr *MockWalletServiceMockRecorder) GetTransactionsSum(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsSum", reflect.TypeOf((*MockWalletService)(nil).GetTransactionsSum), ctx, walletId)
}

// GetWalletByID mocks base method.
func (m *MockWalletService) GetWalletByID(ctx context.Context, walletId string) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByID", ctx, walletId)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByID indicates an expected call of GetWalletByID.
func (mr *MockWalletServiceMockRecorder) GetWalletByID(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByID", reflect.TypeOf((*MockWalletService)(nil).GetWalletByID), ctx, walletId)
}

// GetWallets mocks base method.
func (m *MockWalletService) GetWallets(ctx context.Context, page, limit int) (*api.List[model.Wallet], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets", ctx, page, limit)
	ret0, _ := ret[0].(*api.List[model.Wallet])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets.
func (mr *MockWalletServiceMockRecorder) GetWallets(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockWalletService)(nil).GetWallets), ctx, page, limit)
}

// UpdateWallet mocks base method.
func (m *MockWalletService) UpdateWallet(ctx context.Context, walletId string, req *service.UpdateWalletRequest) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, walletId, req)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockWalletServiceMockRecorder) UpdateWallet(ctx, walletId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockWalletService)(nil).UpdateWallet), ctx, walletId, req)
}
