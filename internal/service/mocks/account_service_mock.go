// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/account_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/account_service.go -destination=internal/service/mocks/account_service_mock.go -package=service_mock
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	api "github.com/abdelrahman146/digital-wallet/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountService) CreateAccount(ctx context.Context, walletId, userId string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, walletId, userId)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountServiceMockRecorder) CreateAccount(ctx, walletId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountService)(nil).CreateAccount), ctx, walletId, userId)
}

// DeleteAccount mocks base method.
func (m *MockAccountService) DeleteAccount(ctx context.Context, accountId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, accountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountServiceMockRecorder) DeleteAccount(ctx, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountService)(nil).DeleteAccount), ctx, accountId)
}

// GetAccount mocks base method.
func (m *MockAccountService) GetAccount(ctx context.Context, accountId string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, accountId)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountServiceMockRecorder) GetAccount(ctx, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountService)(nil).GetAccount), ctx, accountId)
}

// GetWalletAccounts mocks base method.
func (m *MockAccountService) GetWalletAccounts(ctx context.Context, walletId string, page, limit int) (*api.List[model.Account], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletAccounts", ctx, walletId, page, limit)
	ret0, _ := ret[0].(*api.List[model.Account])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletAccounts indicates an expected call of GetWalletAccounts.
func (mr *MockAccountServiceMockRecorder) GetWalletAccounts(ctx, walletId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletAccounts", reflect.TypeOf((*MockAccountService)(nil).GetWalletAccounts), ctx, walletId, page, limit)
}

// GetWalletAccountsSum mocks base method.
func (m *MockAccountService) GetWalletAccountsSum(ctx context.Context, walletId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletAccountsSum", ctx, walletId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletAccountsSum indicates an expected call of GetWalletAccountsSum.
func (mr *MockAccountServiceMockRecorder) GetWalletAccountsSum(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletAccountsSum", reflect.TypeOf((*MockAccountService)(nil).GetWalletAccountsSum), ctx, walletId)
}
