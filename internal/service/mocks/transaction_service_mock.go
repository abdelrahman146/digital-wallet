// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/transaction_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/transaction_service.go -destination=internal/service/mocks/transaction_service_mock.go -package=service_mock
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	service "github.com/abdelrahman146/digital-wallet/internal/service"
	api "github.com/abdelrahman146/digital-wallet/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionService) CreateTransaction(ctx context.Context, walletId, accountId string, req *service.TransactionRequest) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, walletId, accountId, req)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionServiceMockRecorder) CreateTransaction(ctx, walletId, accountId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionService)(nil).CreateTransaction), ctx, walletId, accountId, req)
}

// Exchange mocks base method.
func (m *MockTransactionService) Exchange(ctx context.Context, fromWalletId, toWalletId, userId string, amount uint64) (*service.ExchangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", ctx, fromWalletId, toWalletId, userId, amount)
	ret0, _ := ret[0].(*service.ExchangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockTransactionServiceMockRecorder) Exchange(ctx, fromWalletId, toWalletId, userId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockTransactionService)(nil).Exchange), ctx, fromWalletId, toWalletId, userId, amount)
}

// GetAccountExpiringTransactionsSum mocks base method.
func (m *MockTransactionService) GetAccountExpiringTransactionsSum(ctx context.Context, accountId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountExpiringTransactionsSum", ctx, accountId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountExpiringTransactionsSum indicates an expected call of GetAccountExpiringTransactionsSum.
func (mr *MockTransactionServiceMockRecorder) GetAccountExpiringTransactionsSum(ctx, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountExpiringTransactionsSum", reflect.TypeOf((*MockTransactionService)(nil).GetAccountExpiringTransactionsSum), ctx, accountId)
}

// GetAccountTransactionSum mocks base method.
func (m *MockTransactionService) GetAccountTransactionSum(ctx context.Context, walletId, accountId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTransactionSum", ctx, walletId, accountId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTransactionSum indicates an expected call of GetAccountTransactionSum.
func (mr *MockTransactionServiceMockRecorder) GetAccountTransactionSum(ctx, walletId, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTransactionSum", reflect.TypeOf((*MockTransactionService)(nil).GetAccountTransactionSum), ctx, walletId, accountId)
}

// GetAccountTransactions mocks base method.
func (m *MockTransactionService) GetAccountTransactions(ctx context.Context, walletId, accountId string, page, limit int) (*api.List[model.Transaction], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTransactions", ctx, walletId, accountId, page, limit)
	ret0, _ := ret[0].(*api.List[model.Transaction])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTransactions indicates an expected call of GetAccountTransactions.
func (mr *MockTransactionServiceMockRecorder) GetAccountTransactions(ctx, walletId, accountId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTransactions", reflect.TypeOf((*MockTransactionService)(nil).GetAccountTransactions), ctx, walletId, accountId, page, limit)
}

// GetExpiredWalletTransactions mocks base method.
func (m *MockTransactionService) GetExpiredWalletTransactions(ctx context.Context, walletId string) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredWalletTransactions", ctx, walletId)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredWalletTransactions indicates an expected call of GetExpiredWalletTransactions.
func (mr *MockTransactionServiceMockRecorder) GetExpiredWalletTransactions(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredWalletTransactions", reflect.TypeOf((*MockTransactionService)(nil).GetExpiredWalletTransactions), ctx, walletId)
}

// GetWalletTransactionSum mocks base method.
func (m *MockTransactionService) GetWalletTransactionSum(ctx context.Context, walletId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletTransactionSum", ctx, walletId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletTransactionSum indicates an expected call of GetWalletTransactionSum.
func (mr *MockTransactionServiceMockRecorder) GetWalletTransactionSum(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletTransactionSum", reflect.TypeOf((*MockTransactionService)(nil).GetWalletTransactionSum), ctx, walletId)
}

// GetWalletTransactions mocks base method.
func (m *MockTransactionService) GetWalletTransactions(ctx context.Context, walletId string, page, limit int) (*api.List[model.Transaction], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletTransactions", ctx, walletId, page, limit)
	ret0, _ := ret[0].(*api.List[model.Transaction])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletTransactions indicates an expected call of GetWalletTransactions.
func (mr *MockTransactionServiceMockRecorder) GetWalletTransactions(ctx, walletId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletTransactions", reflect.TypeOf((*MockTransactionService)(nil).GetWalletTransactions), ctx, walletId, page, limit)
}
