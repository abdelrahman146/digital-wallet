// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/tier_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/tier_service.go -destination=internal/service/mocks/tier_service_mock.go -package=service_mock
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	service "github.com/abdelrahman146/digital-wallet/internal/service"
	api "github.com/abdelrahman146/digital-wallet/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockTierService is a mock of TierService interface.
type MockTierService struct {
	ctrl     *gomock.Controller
	recorder *MockTierServiceMockRecorder
}

// MockTierServiceMockRecorder is the mock recorder for MockTierService.
type MockTierServiceMockRecorder struct {
	mock *MockTierService
}

// NewMockTierService creates a new mock instance.
func NewMockTierService(ctrl *gomock.Controller) *MockTierService {
	mock := &MockTierService{ctrl: ctrl}
	mock.recorder = &MockTierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTierService) EXPECT() *MockTierServiceMockRecorder {
	return m.recorder
}

// CreateTier mocks base method.
func (m *MockTierService) CreateTier(ctx context.Context, req *service.CreateTierRequest) (*model.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTier", ctx, req)
	ret0, _ := ret[0].(*model.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTier indicates an expected call of CreateTier.
func (mr *MockTierServiceMockRecorder) CreateTier(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTier", reflect.TypeOf((*MockTierService)(nil).CreateTier), ctx, req)
}

// DeleteTier mocks base method.
func (m *MockTierService) DeleteTier(ctx context.Context, tierId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTier", ctx, tierId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTier indicates an expected call of DeleteTier.
func (mr *MockTierServiceMockRecorder) DeleteTier(ctx, tierId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTier", reflect.TypeOf((*MockTierService)(nil).DeleteTier), ctx, tierId)
}

// GetTierByID mocks base method.
func (m *MockTierService) GetTierByID(ctx context.Context, tierId string) (*model.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTierByID", ctx, tierId)
	ret0, _ := ret[0].(*model.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTierByID indicates an expected call of GetTierByID.
func (mr *MockTierServiceMockRecorder) GetTierByID(ctx, tierId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTierByID", reflect.TypeOf((*MockTierService)(nil).GetTierByID), ctx, tierId)
}

// GetTiers mocks base method.
func (m *MockTierService) GetTiers(ctx context.Context, page, limit int) (*api.List[model.Tier], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTiers", ctx, page, limit)
	ret0, _ := ret[0].(*api.List[model.Tier])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTiers indicates an expected call of GetTiers.
func (mr *MockTierServiceMockRecorder) GetTiers(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTiers", reflect.TypeOf((*MockTierService)(nil).GetTiers), ctx, page, limit)
}
