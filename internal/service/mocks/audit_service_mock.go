// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/audit_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/audit_service.go -destination=internal/service/mocks/audit_service_mock.go -package=service_mock
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	api "github.com/abdelrahman146/digital-wallet/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditService is a mock of AuditService interface.
type MockAuditService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditServiceMockRecorder
}

// MockAuditServiceMockRecorder is the mock recorder for MockAuditService.
type MockAuditServiceMockRecorder struct {
	mock *MockAuditService
}

// NewMockAuditService creates a new mock instance.
func NewMockAuditService(ctrl *gomock.Controller) *MockAuditService {
	mock := &MockAuditService{ctrl: ctrl}
	mock.recorder = &MockAuditServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditService) EXPECT() *MockAuditServiceMockRecorder {
	return m.recorder
}

// GetActorAuditLogs mocks base method.
func (m *MockAuditService) GetActorAuditLogs(ctx context.Context, actor, actorId string, page, limit int) (*api.List[model.Audit], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorAuditLogs", ctx, actor, actorId, page, limit)
	ret0, _ := ret[0].(*api.List[model.Audit])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorAuditLogs indicates an expected call of GetActorAuditLogs.
func (mr *MockAuditServiceMockRecorder) GetActorAuditLogs(ctx, actor, actorId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorAuditLogs", reflect.TypeOf((*MockAuditService)(nil).GetActorAuditLogs), ctx, actor, actorId, page, limit)
}

// GetRecordAuditLogs mocks base method.
func (m *MockAuditService) GetRecordAuditLogs(ctx context.Context, tableName, recordId string, page, limit int) (*api.List[model.Audit], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordAuditLogs", ctx, tableName, recordId, page, limit)
	ret0, _ := ret[0].(*api.List[model.Audit])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordAuditLogs indicates an expected call of GetRecordAuditLogs.
func (mr *MockAuditServiceMockRecorder) GetRecordAuditLogs(ctx, tableName, recordId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordAuditLogs", reflect.TypeOf((*MockAuditService)(nil).GetRecordAuditLogs), ctx, tableName, recordId, page, limit)
}

// GetTableAuditLogs mocks base method.
func (m *MockAuditService) GetTableAuditLogs(ctx context.Context, tableName string, page, limit int) (*api.List[model.Audit], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableAuditLogs", ctx, tableName, page, limit)
	ret0, _ := ret[0].(*api.List[model.Audit])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableAuditLogs indicates an expected call of GetTableAuditLogs.
func (mr *MockAuditServiceMockRecorder) GetTableAuditLogs(ctx, tableName, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableAuditLogs", reflect.TypeOf((*MockAuditService)(nil).GetTableAuditLogs), ctx, tableName, page, limit)
}
