// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/exchange_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/exchange_service.go -destination=internal/service/mocks/exchange_service_mock.go -package=service_mock
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	service "github.com/abdelrahman146/digital-wallet/internal/service"
	api "github.com/abdelrahman146/digital-wallet/pkg/api"
	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockExchangeRateService is a mock of ExchangeRateService interface.
type MockExchangeRateService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateServiceMockRecorder
}

// MockExchangeRateServiceMockRecorder is the mock recorder for MockExchangeRateService.
type MockExchangeRateServiceMockRecorder struct {
	mock *MockExchangeRateService
}

// NewMockExchangeRateService creates a new mock instance.
func NewMockExchangeRateService(ctrl *gomock.Controller) *MockExchangeRateService {
	mock := &MockExchangeRateService{ctrl: ctrl}
	mock.recorder = &MockExchangeRateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateService) EXPECT() *MockExchangeRateServiceMockRecorder {
	return m.recorder
}

// CreateExchangeRate mocks base method.
func (m *MockExchangeRateService) CreateExchangeRate(ctx context.Context, req *service.CreateExchangeRateRequest) (*model.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExchangeRate", ctx, req)
	ret0, _ := ret[0].(*model.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExchangeRate indicates an expected call of CreateExchangeRate.
func (mr *MockExchangeRateServiceMockRecorder) CreateExchangeRate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchangeRate", reflect.TypeOf((*MockExchangeRateService)(nil).CreateExchangeRate), ctx, req)
}

// DeleteExchangeRate mocks base method.
func (m *MockExchangeRateService) DeleteExchangeRate(ctx context.Context, exchangeRateId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchangeRate", ctx, exchangeRateId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExchangeRate indicates an expected call of DeleteExchangeRate.
func (mr *MockExchangeRateServiceMockRecorder) DeleteExchangeRate(ctx, exchangeRateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchangeRate", reflect.TypeOf((*MockExchangeRateService)(nil).DeleteExchangeRate), ctx, exchangeRateId)
}

// GetExchangeRates mocks base method.
func (m *MockExchangeRateService) GetExchangeRates(ctx context.Context, page, limit int) (*api.List[model.ExchangeRate], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRates", ctx, page, limit)
	ret0, _ := ret[0].(*api.List[model.ExchangeRate])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRates indicates an expected call of GetExchangeRates.
func (mr *MockExchangeRateServiceMockRecorder) GetExchangeRates(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRates", reflect.TypeOf((*MockExchangeRateService)(nil).GetExchangeRates), ctx, page, limit)
}

// GetExchangeRatesByWalletID mocks base method.
func (m *MockExchangeRateService) GetExchangeRatesByWalletID(ctx context.Context, walletId string, page, limit int) (*api.List[model.ExchangeRate], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRatesByWalletID", ctx, walletId, page, limit)
	ret0, _ := ret[0].(*api.List[model.ExchangeRate])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRatesByWalletID indicates an expected call of GetExchangeRatesByWalletID.
func (mr *MockExchangeRateServiceMockRecorder) GetExchangeRatesByWalletID(ctx, walletId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRatesByWalletID", reflect.TypeOf((*MockExchangeRateService)(nil).GetExchangeRatesByWalletID), ctx, walletId, page, limit)
}

// UpdateExchangeRate mocks base method.
func (m *MockExchangeRateService) UpdateExchangeRate(ctx context.Context, exchangeRateId string, exchangeRate decimal.Decimal) (*model.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExchangeRate", ctx, exchangeRateId, exchangeRate)
	ret0, _ := ret[0].(*model.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExchangeRate indicates an expected call of UpdateExchangeRate.
func (mr *MockExchangeRateServiceMockRecorder) UpdateExchangeRate(ctx, exchangeRateId, exchangeRate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExchangeRate", reflect.TypeOf((*MockExchangeRateService)(nil).UpdateExchangeRate), ctx, exchangeRateId, exchangeRate)
}
