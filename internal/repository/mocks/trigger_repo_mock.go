// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/trigger_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/trigger_repo.go -destination=internal/repository/mocks/trigger_repo_mock.go -package=repository_mock
//

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTriggerRepo is a mock of TriggerRepo interface.
type MockTriggerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerRepoMockRecorder
}

// MockTriggerRepoMockRecorder is the mock recorder for MockTriggerRepo.
type MockTriggerRepoMockRecorder struct {
	mock *MockTriggerRepo
}

// NewMockTriggerRepo creates a new mock instance.
func NewMockTriggerRepo(ctrl *gomock.Controller) *MockTriggerRepo {
	mock := &MockTriggerRepo{ctrl: ctrl}
	mock.recorder = &MockTriggerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerRepo) EXPECT() *MockTriggerRepoMockRecorder {
	return m.recorder
}

// CountTriggers mocks base method.
func (m *MockTriggerRepo) CountTriggers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTriggers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTriggers indicates an expected call of CountTriggers.
func (mr *MockTriggerRepoMockRecorder) CountTriggers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTriggers", reflect.TypeOf((*MockTriggerRepo)(nil).CountTriggers), ctx)
}

// CreateTrigger mocks base method.
func (m *MockTriggerRepo) CreateTrigger(ctx context.Context, trigger *model.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrigger", ctx, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrigger indicates an expected call of CreateTrigger.
func (mr *MockTriggerRepoMockRecorder) CreateTrigger(ctx, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*MockTriggerRepo)(nil).CreateTrigger), ctx, trigger)
}

// DeleteTrigger mocks base method.
func (m *MockTriggerRepo) DeleteTrigger(ctx context.Context, trigger *model.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrigger", ctx, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrigger indicates an expected call of DeleteTrigger.
func (mr *MockTriggerRepoMockRecorder) DeleteTrigger(ctx, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrigger", reflect.TypeOf((*MockTriggerRepo)(nil).DeleteTrigger), ctx, trigger)
}

// FetchTriggerByID mocks base method.
func (m *MockTriggerRepo) FetchTriggerByID(ctx context.Context, id uint64) (*model.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTriggerByID", ctx, id)
	ret0, _ := ret[0].(*model.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTriggerByID indicates an expected call of FetchTriggerByID.
func (mr *MockTriggerRepoMockRecorder) FetchTriggerByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTriggerByID", reflect.TypeOf((*MockTriggerRepo)(nil).FetchTriggerByID), ctx, id)
}

// FetchTriggerBySlug mocks base method.
func (m *MockTriggerRepo) FetchTriggerBySlug(ctx context.Context, slug string) (*model.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTriggerBySlug", ctx, slug)
	ret0, _ := ret[0].(*model.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTriggerBySlug indicates an expected call of FetchTriggerBySlug.
func (mr *MockTriggerRepoMockRecorder) FetchTriggerBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTriggerBySlug", reflect.TypeOf((*MockTriggerRepo)(nil).FetchTriggerBySlug), ctx, slug)
}

// FetchTriggers mocks base method.
func (m *MockTriggerRepo) FetchTriggers(ctx context.Context, page, limit int) ([]model.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTriggers", ctx, page, limit)
	ret0, _ := ret[0].([]model.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTriggers indicates an expected call of FetchTriggers.
func (mr *MockTriggerRepoMockRecorder) FetchTriggers(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTriggers", reflect.TypeOf((*MockTriggerRepo)(nil).FetchTriggers), ctx, page, limit)
}

// UpdateTrigger mocks base method.
func (m *MockTriggerRepo) UpdateTrigger(ctx context.Context, trigger *model.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrigger", ctx, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrigger indicates an expected call of UpdateTrigger.
func (mr *MockTriggerRepoMockRecorder) UpdateTrigger(ctx, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrigger", reflect.TypeOf((*MockTriggerRepo)(nil).UpdateTrigger), ctx, trigger)
}
