// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/account_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/account_repo.go -destination=internal/repository/mocks/account_repo_mock.go -package=repository_mock
//

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// CountWalletAccounts mocks base method.
func (m *MockAccountRepo) CountWalletAccounts(ctx context.Context, walletId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWalletAccounts", ctx, walletId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWalletAccounts indicates an expected call of CountWalletAccounts.
func (mr *MockAccountRepoMockRecorder) CountWalletAccounts(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWalletAccounts", reflect.TypeOf((*MockAccountRepo)(nil).CountWalletAccounts), ctx, walletId)
}

// CreateAccount mocks base method.
func (m *MockAccountRepo) CreateAccount(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepoMockRecorder) CreateAccount(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepo)(nil).CreateAccount), ctx, account)
}

// DeleteAccount mocks base method.
func (m *MockAccountRepo) DeleteAccount(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountRepoMockRecorder) DeleteAccount(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountRepo)(nil).DeleteAccount), ctx, account)
}

// FetchAccountByID mocks base method.
func (m *MockAccountRepo) FetchAccountByID(ctx context.Context, accountId string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccountByID", ctx, accountId)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAccountByID indicates an expected call of FetchAccountByID.
func (mr *MockAccountRepoMockRecorder) FetchAccountByID(ctx, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccountByID", reflect.TypeOf((*MockAccountRepo)(nil).FetchAccountByID), ctx, accountId)
}

// FetchAccountByUserID mocks base method.
func (m *MockAccountRepo) FetchAccountByUserID(ctx context.Context, walletId, userId string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccountByUserID", ctx, walletId, userId)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAccountByUserID indicates an expected call of FetchAccountByUserID.
func (mr *MockAccountRepoMockRecorder) FetchAccountByUserID(ctx, walletId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccountByUserID", reflect.TypeOf((*MockAccountRepo)(nil).FetchAccountByUserID), ctx, walletId, userId)
}

// FetchWalletAccounts mocks base method.
func (m *MockAccountRepo) FetchWalletAccounts(ctx context.Context, walletId string, page, limit int) ([]model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWalletAccounts", ctx, walletId, page, limit)
	ret0, _ := ret[0].([]model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWalletAccounts indicates an expected call of FetchWalletAccounts.
func (mr *MockAccountRepoMockRecorder) FetchWalletAccounts(ctx, walletId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWalletAccounts", reflect.TypeOf((*MockAccountRepo)(nil).FetchWalletAccounts), ctx, walletId, page, limit)
}

// SumWalletAccounts mocks base method.
func (m *MockAccountRepo) SumWalletAccounts(ctx context.Context, walletId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumWalletAccounts", ctx, walletId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumWalletAccounts indicates an expected call of SumWalletAccounts.
func (mr *MockAccountRepoMockRecorder) SumWalletAccounts(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumWalletAccounts", reflect.TypeOf((*MockAccountRepo)(nil).SumWalletAccounts), ctx, walletId)
}
