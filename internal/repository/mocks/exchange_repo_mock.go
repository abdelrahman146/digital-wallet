// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/exchange_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/exchange_repo.go -destination=internal/repository/mocks/exchange_repo_mock.go -package=repository_mock
//

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockExchangeRateRepo is a mock of ExchangeRateRepo interface.
type MockExchangeRateRepo struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateRepoMockRecorder
}

// MockExchangeRateRepoMockRecorder is the mock recorder for MockExchangeRateRepo.
type MockExchangeRateRepoMockRecorder struct {
	mock *MockExchangeRateRepo
}

// NewMockExchangeRateRepo creates a new mock instance.
func NewMockExchangeRateRepo(ctrl *gomock.Controller) *MockExchangeRateRepo {
	mock := &MockExchangeRateRepo{ctrl: ctrl}
	mock.recorder = &MockExchangeRateRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateRepo) EXPECT() *MockExchangeRateRepoMockRecorder {
	return m.recorder
}

// CountExchangeRates mocks base method.
func (m *MockExchangeRateRepo) CountExchangeRates(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountExchangeRates", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountExchangeRates indicates an expected call of CountExchangeRates.
func (mr *MockExchangeRateRepoMockRecorder) CountExchangeRates(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountExchangeRates", reflect.TypeOf((*MockExchangeRateRepo)(nil).CountExchangeRates), ctx)
}

// CountWalletExchangeRates mocks base method.
func (m *MockExchangeRateRepo) CountWalletExchangeRates(ctx context.Context, walletId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWalletExchangeRates", ctx, walletId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWalletExchangeRates indicates an expected call of CountWalletExchangeRates.
func (mr *MockExchangeRateRepoMockRecorder) CountWalletExchangeRates(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWalletExchangeRates", reflect.TypeOf((*MockExchangeRateRepo)(nil).CountWalletExchangeRates), ctx, walletId)
}

// CreateExchangeRate mocks base method.
func (m *MockExchangeRateRepo) CreateExchangeRate(ctx context.Context, exchangeRate *model.ExchangeRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExchangeRate", ctx, exchangeRate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExchangeRate indicates an expected call of CreateExchangeRate.
func (mr *MockExchangeRateRepoMockRecorder) CreateExchangeRate(ctx, exchangeRate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchangeRate", reflect.TypeOf((*MockExchangeRateRepo)(nil).CreateExchangeRate), ctx, exchangeRate)
}

// DeleteExchangeRate mocks base method.
func (m *MockExchangeRateRepo) DeleteExchangeRate(ctx context.Context, exchangeRate *model.ExchangeRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchangeRate", ctx, exchangeRate)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExchangeRate indicates an expected call of DeleteExchangeRate.
func (mr *MockExchangeRateRepoMockRecorder) DeleteExchangeRate(ctx, exchangeRate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchangeRate", reflect.TypeOf((*MockExchangeRateRepo)(nil).DeleteExchangeRate), ctx, exchangeRate)
}

// FetchExchangeRate mocks base method.
func (m *MockExchangeRateRepo) FetchExchangeRate(ctx context.Context, fromWalletId, toWalletId string, tierId *string) (*model.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchExchangeRate", ctx, fromWalletId, toWalletId, tierId)
	ret0, _ := ret[0].(*model.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchExchangeRate indicates an expected call of FetchExchangeRate.
func (mr *MockExchangeRateRepoMockRecorder) FetchExchangeRate(ctx, fromWalletId, toWalletId, tierId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchExchangeRate", reflect.TypeOf((*MockExchangeRateRepo)(nil).FetchExchangeRate), ctx, fromWalletId, toWalletId, tierId)
}

// FetchExchangeRateByID mocks base method.
func (m *MockExchangeRateRepo) FetchExchangeRateByID(ctx context.Context, exchangeRateId string) (*model.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchExchangeRateByID", ctx, exchangeRateId)
	ret0, _ := ret[0].(*model.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchExchangeRateByID indicates an expected call of FetchExchangeRateByID.
func (mr *MockExchangeRateRepoMockRecorder) FetchExchangeRateByID(ctx, exchangeRateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchExchangeRateByID", reflect.TypeOf((*MockExchangeRateRepo)(nil).FetchExchangeRateByID), ctx, exchangeRateId)
}

// FetchExchangeRates mocks base method.
func (m *MockExchangeRateRepo) FetchExchangeRates(ctx context.Context, page, limit int) ([]model.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchExchangeRates", ctx, page, limit)
	ret0, _ := ret[0].([]model.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchExchangeRates indicates an expected call of FetchExchangeRates.
func (mr *MockExchangeRateRepoMockRecorder) FetchExchangeRates(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchExchangeRates", reflect.TypeOf((*MockExchangeRateRepo)(nil).FetchExchangeRates), ctx, page, limit)
}

// FetchWalletExchangeRates mocks base method.
func (m *MockExchangeRateRepo) FetchWalletExchangeRates(ctx context.Context, walletId string, page, limit int) ([]model.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWalletExchangeRates", ctx, walletId, page, limit)
	ret0, _ := ret[0].([]model.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWalletExchangeRates indicates an expected call of FetchWalletExchangeRates.
func (mr *MockExchangeRateRepoMockRecorder) FetchWalletExchangeRates(ctx, walletId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWalletExchangeRates", reflect.TypeOf((*MockExchangeRateRepo)(nil).FetchWalletExchangeRates), ctx, walletId, page, limit)
}

// UpdateExchangeRate mocks base method.
func (m *MockExchangeRateRepo) UpdateExchangeRate(ctx context.Context, exchangeRate *model.ExchangeRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExchangeRate", ctx, exchangeRate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExchangeRate indicates an expected call of UpdateExchangeRate.
func (mr *MockExchangeRateRepoMockRecorder) UpdateExchangeRate(ctx, exchangeRate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExchangeRate", reflect.TypeOf((*MockExchangeRateRepo)(nil).UpdateExchangeRate), ctx, exchangeRate)
}
