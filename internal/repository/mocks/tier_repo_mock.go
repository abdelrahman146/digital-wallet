// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/tier_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/tier_repo.go -destination=internal/repository/mocks/tier_repo_mock.go -package=repository_mock
//

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTierRepo is a mock of TierRepo interface.
type MockTierRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTierRepoMockRecorder
}

// MockTierRepoMockRecorder is the mock recorder for MockTierRepo.
type MockTierRepoMockRecorder struct {
	mock *MockTierRepo
}

// NewMockTierRepo creates a new mock instance.
func NewMockTierRepo(ctrl *gomock.Controller) *MockTierRepo {
	mock := &MockTierRepo{ctrl: ctrl}
	mock.recorder = &MockTierRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTierRepo) EXPECT() *MockTierRepoMockRecorder {
	return m.recorder
}

// CountTiers mocks base method.
func (m *MockTierRepo) CountTiers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTiers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTiers indicates an expected call of CountTiers.
func (mr *MockTierRepoMockRecorder) CountTiers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTiers", reflect.TypeOf((*MockTierRepo)(nil).CountTiers), ctx)
}

// CreateTier mocks base method.
func (m *MockTierRepo) CreateTier(ctx context.Context, tier *model.Tier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTier", ctx, tier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTier indicates an expected call of CreateTier.
func (mr *MockTierRepoMockRecorder) CreateTier(ctx, tier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTier", reflect.TypeOf((*MockTierRepo)(nil).CreateTier), ctx, tier)
}

// DeleteTier mocks base method.
func (m *MockTierRepo) DeleteTier(ctx context.Context, tier *model.Tier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTier", ctx, tier)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTier indicates an expected call of DeleteTier.
func (mr *MockTierRepoMockRecorder) DeleteTier(ctx, tier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTier", reflect.TypeOf((*MockTierRepo)(nil).DeleteTier), ctx, tier)
}

// FetchTierByID mocks base method.
func (m *MockTierRepo) FetchTierByID(ctx context.Context, tierId string) (*model.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTierByID", ctx, tierId)
	ret0, _ := ret[0].(*model.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTierByID indicates an expected call of FetchTierByID.
func (mr *MockTierRepoMockRecorder) FetchTierByID(ctx, tierId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTierByID", reflect.TypeOf((*MockTierRepo)(nil).FetchTierByID), ctx, tierId)
}

// FetchTiers mocks base method.
func (m *MockTierRepo) FetchTiers(ctx context.Context, page, limit int) ([]model.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTiers", ctx, page, limit)
	ret0, _ := ret[0].([]model.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTiers indicates an expected call of FetchTiers.
func (mr *MockTierRepoMockRecorder) FetchTiers(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTiers", reflect.TypeOf((*MockTierRepo)(nil).FetchTiers), ctx, page, limit)
}
