// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/transaction_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/transaction_repo.go -destination=internal/repository/mocks/transaction_repo_mock.go -package=repository_mock
//

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/abdelrahman146/digital-wallet/internal/model"
	repository "github.com/abdelrahman146/digital-wallet/internal/repository"
	types "github.com/abdelrahman146/digital-wallet/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepo is a mock of TransactionRepo interface.
type MockTransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepoMockRecorder
}

// MockTransactionRepoMockRecorder is the mock recorder for MockTransactionRepo.
type MockTransactionRepoMockRecorder struct {
	mock *MockTransactionRepo
}

// NewMockTransactionRepo creates a new mock instance.
func NewMockTransactionRepo(ctrl *gomock.Controller) *MockTransactionRepo {
	mock := &MockTransactionRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepo) EXPECT() *MockTransactionRepoMockRecorder {
	return m.recorder
}

// CountAccountTransactions mocks base method.
func (m *MockTransactionRepo) CountAccountTransactions(ctx context.Context, accountId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAccountTransactions", ctx, accountId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAccountTransactions indicates an expected call of CountAccountTransactions.
func (mr *MockTransactionRepoMockRecorder) CountAccountTransactions(ctx, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAccountTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).CountAccountTransactions), ctx, accountId)
}

// CountWalletTransactions mocks base method.
func (m *MockTransactionRepo) CountWalletTransactions(ctx context.Context, walletId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWalletTransactions", ctx, walletId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWalletTransactions indicates an expected call of CountWalletTransactions.
func (mr *MockTransactionRepoMockRecorder) CountWalletTransactions(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWalletTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).CountWalletTransactions), ctx, walletId)
}

// CreateTransaction mocks base method.
func (m *MockTransactionRepo) CreateTransaction(ctx context.Context, transaction *model.Transaction, accountVersion uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction, accountVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionRepoMockRecorder) CreateTransaction(ctx, transaction, accountVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionRepo)(nil).CreateTransaction), ctx, transaction, accountVersion)
}

// FetchAccountTransactions mocks base method.
func (m *MockTransactionRepo) FetchAccountTransactions(ctx context.Context, accountId string, page, limit int) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccountTransactions", ctx, accountId, page, limit)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAccountTransactions indicates an expected call of FetchAccountTransactions.
func (mr *MockTransactionRepoMockRecorder) FetchAccountTransactions(ctx, accountId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccountTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).FetchAccountTransactions), ctx, accountId, page, limit)
}

// FetchExpiredWalletTransactions mocks base method.
func (m *MockTransactionRepo) FetchExpiredWalletTransactions(ctx context.Context, walletId string) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchExpiredWalletTransactions", ctx, walletId)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchExpiredWalletTransactions indicates an expected call of FetchExpiredWalletTransactions.
func (mr *MockTransactionRepoMockRecorder) FetchExpiredWalletTransactions(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchExpiredWalletTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).FetchExpiredWalletTransactions), ctx, walletId)
}

// FetchWalletTransactions mocks base method.
func (m *MockTransactionRepo) FetchWalletTransactions(ctx context.Context, walletId string, page, limit int) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWalletTransactions", ctx, walletId, page, limit)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWalletTransactions indicates an expected call of FetchWalletTransactions.
func (mr *MockTransactionRepoMockRecorder) FetchWalletTransactions(ctx, walletId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWalletTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).FetchWalletTransactions), ctx, walletId, page, limit)
}

// PerformExchange mocks base method.
func (m *MockTransactionRepo) PerformExchange(ctx context.Context, from, to *repository.ExchangeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformExchange", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformExchange indicates an expected call of PerformExchange.
func (mr *MockTransactionRepoMockRecorder) PerformExchange(ctx, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformExchange", reflect.TypeOf((*MockTransactionRepo)(nil).PerformExchange), ctx, from, to)
}

// SumAccountTransactions mocks base method.
func (m *MockTransactionRepo) SumAccountTransactions(ctx context.Context, accountId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumAccountTransactions", ctx, accountId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumAccountTransactions indicates an expected call of SumAccountTransactions.
func (mr *MockTransactionRepoMockRecorder) SumAccountTransactions(ctx, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumAccountTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).SumAccountTransactions), ctx, accountId)
}

// SumExpiringAccountTransactions mocks base method.
func (m *MockTransactionRepo) SumExpiringAccountTransactions(ctx context.Context, accountId string, expireInterval types.Interval) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumExpiringAccountTransactions", ctx, accountId, expireInterval)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumExpiringAccountTransactions indicates an expected call of SumExpiringAccountTransactions.
func (mr *MockTransactionRepoMockRecorder) SumExpiringAccountTransactions(ctx, accountId, expireInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumExpiringAccountTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).SumExpiringAccountTransactions), ctx, accountId, expireInterval)
}

// SumWalletTransactions mocks base method.
func (m *MockTransactionRepo) SumWalletTransactions(ctx context.Context, walletId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumWalletTransactions", ctx, walletId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumWalletTransactions indicates an expected call of SumWalletTransactions.
func (mr *MockTransactionRepoMockRecorder) SumWalletTransactions(ctx, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumWalletTransactions", reflect.TypeOf((*MockTransactionRepo)(nil).SumWalletTransactions), ctx, walletId)
}
